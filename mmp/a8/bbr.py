import torch
import numpy as np

from ..a3.annotation import AnnotationRect


def get_bbr_loss(
    anchor_boxes: torch.Tensor,
    adjustments: torch.Tensor,
    groundtruths: torch.Tensor,
):
    """
    @param anchor_boxes: Batch of box coordinates from the anchor grid
    @param adjustments: Batch of adjustments of the prediction (#data, 4)
    @param groundtruths: Batch of ground truth data given as (x1, y1, x2, y2) (#data, 4)
    """

    # Normalize values for better loss computation

    image_size = 224.0
    anchor_boxes = anchor_boxes.float() / image_size
    groundtruths = groundtruths.float() / image_size
    adjustments = adjustments.float() / image_size

    ax1, ay1, ax2, ay2 = anchor_boxes[:, 0], anchor_boxes[:, 1], anchor_boxes[:, 2], anchor_boxes[:, 3]
    offset_x, offset_y, scale_width, scale_height = adjustments[:, 0], adjustments[:, 1], adjustments[:, 2], adjustments[:, 3]
    gx1, gy1, gx2, gy2 = groundtruths[:, 0], groundtruths[:, 1], groundtruths[:, 2], groundtruths[:, 3]

    eps = 1e-6

    loss_offset_x = (offset_x - (gx1 - ax1) / (ax2 - ax1).clamp(min=eps)).pow(2)
    loss_offset_y = (offset_y - (gy1 - ay1) / (ay2 - ay1).clamp(min=eps)).pow(2)
    loss_scale_width = (scale_width - (gx2 - gx1) / (ax2 - ax1).clamp(min=eps)).pow(2)
    loss_scale_height = (scale_height - (gy2 - gy1) / (ay2 - ay1).clamp(min=eps)).pow(2)

    bbr_loss = loss_offset_x + loss_offset_y + loss_scale_width + loss_scale_height

    return bbr_loss.mean()

def apply_bbr(anchor_box: np.ndarray, adjustment: torch.Tensor) -> AnnotationRect:
    """Calculates an AnnotationRect based on a given anchor box and adjustments

    @param anchor_box: Single box coordinates from the anchor grid
    @param adjustment: Adjustments, generated by the model
    """

    x1 = anchor_box[0]
    y1 = anchor_box[1]
    x2 = anchor_box[2]
    y2 = anchor_box[3]

    offset_x = adjustment[0]
    offset_y = adjustment[1]
    scale_width = adjustment[2]
    scale_height = adjustment[3]

    new_x1 = x1 + offset_x * (x2 - x1)
    new_y1 = y1 + offset_y * (y2 - y1)

    return AnnotationRect(
        new_x1,
        new_y1,
        new_x1 + scale_width * (x2 - x1),
        new_y1 + scale_height * (y2 - y1)
    )